#!/bin/bash
# ---------------------------------------------------------------------
# gitAutomator (ga) by Eduardo Rodriguez Fernandez (@erodrigufer) 2021
#
# Code licensed under BSD 3-Clause License, 
# for more information check the LICENSE file attached to the repository.
#
#
# ---------------------------------------------------------------------
# Useful references on how to handle input flags/parameters in shell scripts:
# 1) https://stackoverflow.com/questions/7069682/how-to-get-arguments-with-flags-in-bash
# 2) https://pubs.opengroup.org/onlinepubs/9699919799/utilities/getopts.html

# Global variables
m_flag='' # flag for multiple commits
h_flag='' # help menu/usage display
v_flag='' # show running version/release of script
p_flag='' # do NOT push after commit
w_flag='' # run gh run watch command to see output of GitHub Actions job
r_flag='' # create a new release with the gh API
files=''

VERSION_NUMBER="1.2.0"

# time to wait before calling `gh run watch`to GitHub Actions API
WAIT_TIME="3" # in seconds

# TO DO, when using the script in vim, it is not displaying the "Commits pushed successfully message"
handlePushAndExit() {
# in the first case the p flag was not set, so just push and exit
	if [ -z "$p_flag" ]; then
		# By usign the -q flag or --quiet, git push suppresses all output, it could be interesting to use 
		# the stdout output (or stderr) of git push and git commit and git status to get more information and see if an error has occurred
		# only if the commits were successfully pushed then (&&) echo to stdout that the commits were pushed
		# if command fails, exit to avoid running the command for eventually flag 'w'
		git push --quiet && echo 'Commit(s) pushed successfully!' || exit 1
	
		# w flag was set so check for jobs in github actions
		if [ ! -z "$w_flag" ]; then
			# sleep for 1 second, because otherwise it is not possible to see if any GitHub Actions jobs are being executed
			# after pushing to repo
			sleep ${WAIT_TIME}
			gh run watch
		fi

		exit 0 # exit the script successfully
	fi

# in the second case the p flag was set, so just exit without pushing
	if [ ! -z "$p_flag" ]; then
		echo "Exiting without pushing commits staged!"
		exit 0 # exit the script successfully
	fi
}

print_usage () {
 
	# basename removes the trailing path for the program name
	# the full program path can be always found in $0 
	local PROGNAME=$(basename $0)

  echo "$PROGNAME: usage: $PROGNAME [-h] [-r] [-v] [-ms[p][w]] [file ...] 
	-h Display usage/ man page
	-m Perform multiple commits with one single call of the $PROGNAME script
	-p Commit files on local repo, but do NOT push to remote. This option is useful, if working with the vim extension for ${PROGNAME}, so that one can commit often, without losing time each time with the git push handshake.
	-r Create a new release using the gh API
	-s Display all files that have been modified since last commit at the start of the script (simplified version of invoking *git status*)
	-v Display the current version/release of $PROGNAME
	-w After pushing commits execute *gh run watch* to see the report of GitHub Actions of repository
	"
	return
}

print_version() {

	# basename removes the trailing path for the program name
	# the full program path can be always found in $0 
	local PROGNAME="$(basename $0)"

	printf "${PROGNAME}, version ${VERSION_NUMBER}\nEduardo Rodriguez Fernandez (@erodrigufer) Copyright (c) 2021\n[BSD 3-Clause License]\n" 

	return
}

create_new_release(){

	printf "* Creating a new release...\nThis is a list of all current releases in this repository: \n"
	# Print only the version names using awk (the names are in the first column)
	gh release list | awk {'print $1'}

	read -p "Pick a version (name) for the new release > "
	local VERSION_TAG="$(echo "$REPLY")"
	echo "Version: $VERSION_TAG"

	# check if there is a CHANGELOG.md file in the repo, if there is, then use the CHANGELOG.md file 
	# as the release notes, otherwise ask the user to input its own release notes
	[ -f ./CHANGELOG.md ] && echo "Using the file CHANGELOG.md as the release notes" && gh release create "${VERSION_TAG}" --title="${VERSION_TAG}" -F ./CHANGELOG.md && { echo "New release ${VERSION_TAG} was created successfully!" ; exit 0; } || { echo "[ERROR] An error occured while pushing the new release to GitHub!" ; exit -1 ; }

	read -p "CHANGELOG.md file was not found, add a release note > "
	local RELEASE_NOTE="$(echo "$REPLY")"

	gh release create "${VERSION_TAG}" --title="${VERSION_TAG}" --notes="${RELEASE_NOTE}" && { echo "New release ${VERSION_TAG} was created successfully!" ; exit 0; } || { echo "[ERROR] An error occured while pushing the new release to GitHub!" ; exit -1 ; }

	# Fetch new tags to local repo
	git fetch --tags origin

}

check_flags() {
while getopts 'mhprsvw' flag; do
# Note: If a character is followed by a colon (e.g. f:), that option is expected to have an argument
# If it does not provide an argument an error message will be shown
	case "${flag}" in
	h) h_flag='true' 
		print_usage
		exit 0;; # h_flag was specified
	v) v_flag='true'
		print_version
		exit 0;; 
	r) r_flag='true'
		create_new_release
		exit 0;;
	s)
		echo "The following files have been modified since the last commit: "
		git status | grep modified: ;; # print only files that have been modified
	m) m_flag='true' ;; # m_flag was specified
	p) p_flag='true' ;; # p_flag was specified
	w) w_flag='true' ;; # w_flag was specified
	*) print_usage # the case when an undefined flag is used
			 exit 1 ;; # print usage and exit with an error
	esac
done
# check if p and w flag have been used simultaneously
# if the p flag was used, then w flag cannot be used
#if [ "$INPUT_MAIN" == "NO" ]; then
if [ ! -z "${p_flag}" ]; then
	if [ ! -z "${w_flag}" ]; then
		print_usage
		exit 1
	fi
fi

# OPTIND equals 2 if the -m option is specified, if no flag is specified then OPTIND equals 1
shift $(( OPTIND -1 ))

# store all files listed (also no files possible)
files=$@
return 0
}

check_files_are_listed() {
# check if $files string is greater than zero
if [ -n "$files" ]; then
	echo "YES" # there were files listed
else
	echo "NO" # no files were listed
fi

return 0
}

check_files_regular_exist(){

# reset values
local FILES_TO_CHECK=$@ # all inputs to this function will be checked
ALL_FILES_OK='YES' # variable to check if all files are appropriate
FILES_OK='' # variable to store files that exist
FILES_NOT_EXIST='' # variable to store files that don't exist


# check if the input to the function is not empty,
# if empty ALL_FILES_OK=NO -> return out of function

# check if $FILES_TO_CHECK string has a length of zero
if [ -z "$FILES_TO_CHECK" ]; then
	ALL_FILES_OK='NO'
	return 0 # end function, since no input
fi


# go through until no more positional parameters
while [[ $# -gt 0 ]]; do
	if [ -e "$1" ]; then # check if file exists
		if [ -f "$1" ]; then # check if file is a regular file
			FILES_OK+="$1 " # append to FILES_OK, if file is regular and exists
		else # file is not a regular file
		FILES_NOT_EXIST+="$1 " # append to FILES_NOT_EXIST, if file is not regular
		# at least one file is not regular
		ALL_FILES_OK='NO'
		fi
	else # file does not exist
		FILES_NOT_EXIST+="$1 " # append to FILES_NOT_EXIST, if file does not exist
		# at least one file does not exist
		ALL_FILES_OK='NO'
	fi
	# shift positional parameters
	shift
done

return 0

}

ask_for_files() {
	read -p "Which files would you like to add to the commit? > "
	# Echo the keyboard input to be used as a variable later
	echo "$REPLY"
}

main(){
	# INPUT_MAIN can be either "YES" or "NO"
	INPUT_MAIN=$1

	local FILES_TO_CHECK=$files
	
	#local UI_MORE_FILES=''

	if [ "$INPUT_MAIN" == "NO" ]; then
		# Use the output of ask_for_files as the variable for files to check
		# $(function) = run the function inside and use as output
		FILES_TO_CHECK="$(ask_for_files)"
	fi

	# Check if files exist and are regular files
	check_files_regular_exist $FILES_TO_CHECK

# ----------------------------------------------------------------
	# Check if all files are ok after check
	if [ "$ALL_FILES_OK" == "YES" ]; then
		# Add files to commit
		git add ${FILES_OK} && echo "The following files were added to your commit: $FILES_OK"

		#git status
		
	fi # ---- check if all files exist and are regular files "YES"
# ----------------------------------------------------------------

# some files used as input do not exist or are no regular files
	if [ "$ALL_FILES_OK" == "NO" ]; then
		# check if $FILES_OK is NOT empty/length is unequal to 0 (! -z)
		if [ ! -z  "$FILES_OK" ]; then
		# add the files that exist and are regular to the commit
			git add ${FILES_OK} && echo "The following files were added to your commit: $FILES_OK"

			read -p "Do you want to add more files to the commit? (y/n) > "
			# store the output of piping the echo of the reply to tr,
			# in order to use tr to translate all uppercase letters to lowercase letter
			# (if necessary)
			local UI_MORE_FILES="$(echo "$REPLY" | tr [:upper:] [:lower:])"

			# add more files to the commit
			if [ "$UI_MORE_FILES" == "y" ]; then
				ls -l # print all available files in the current folder
				INPUT_MAIN="NO" # input main is now NO, so that it starts the loop back by asking for more files
				return # exit the function main, in order to start the function back again from the beginning
			fi
			# the input wasn't either 'y' or 'n'
			# if the input was n it is going to jump to the line asking for a commit message anyways
			if [ "$UI_MORE_FILES" != "n" ]; then
						echo "Invalid input, proceeding to add commit message for the files added until now."
			fi
		fi # -- some files are OK

		# if NO files are OK
		if [ -z "$FILES_OK" ]; then
			echo "The files used as input were either non-existing or not regular files!"
			ls -l # print all available files in the current folder	
			INPUT_MAIN="NO" # input main is now NO, so that it starts the loop back by asking for more files
			return # exit the function main, in order to start the function back again from the beginning
		fi #-- NO files are OK

	fi # -- ALL_FILES_OK = NO
		
# ----------------------------------------------------------------


	# Ask for a commit message
	read -p "Add a commit message: > "
	# if commit is accepted, print the commit message
	git commit --quiet -m "$REPLY" && echo "Commit message: $REPLY"
	# if the m flag has zero length (not defined/false), then exit the program successfully, since no more commits are desired
	if [ -z "$m_flag" ]; then
		handlePushAndExit # use this function to see if a push is desired and exit
	fi # -- NO m flag

## TODO!! probably handle the cases in which git fails, for example, when there is no connection and it cannot be pushed, by reading the output of git push and git commit (!= 0 then there was an error)

	# if the m flag was used, then multiple commits mode
	if [ ! -z "m_flag" ]; then
		read -p "Do you want to perform more commits? (y/n) > "
		# store the output of piping the echo of the reply to tr,
		# in order to use tr to translate all uppercase letters to lowercase letter
		# (if necessary)
		local UI_MORE_COMMITS="$(echo "$REPLY" | tr [:upper:] [:lower:])"

		# (n) no more commits will be performed
		if [ "$UI_MORE_COMMITS" == "n" ]; then
			handlePushAndExit # use this function to see if a push is desired and exit
		fi # --(n) no more commits

		# (y) more commits will be performed start all over with the main function
		if [ "$UI_MORE_COMMITS" == "y" ]; then
			INPUT_MAIN="NO" # input main is now NO, so that it starts the loop back by asking for more files
			return # exit the function main, in order to start the function back again from the beginning
		
		else # in this case, neither 'y' nor 'n' was used as input, push commits until now, and exit script (invalid input)
			echo "Invalid input, proceeding to push all commits until now and exiting script!"
			# TO DO: Am I really pushing all commits if there is an invalid input? Check that!
		fi # --(y) more commits


	fi #- m flag SELECTED


} #-- main
# -----------------------------------------------------------------------------

# '$@' expands into a list of all positional parameters, starting with 1, from the positional parameters 
# of the script being run
check_flags $@

# store the echo output of the function check_files_are_listed
# as a variable
LISTED_FILES="$(check_files_are_listed)"
INPUT_MAIN=$LISTED_FILES

# while loop for main program body
while true; do

	main $INPUT_MAIN

done


